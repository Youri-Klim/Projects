#TIMER SIGNAL:
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Timersignal is
    Port ( TSin : in STD_LOGIC;
           reset : in STD_LOGIC;
           TSout : out STD_LOGIC);
end Timersignal;

architecture Behavioral of Timersignal is
signal counter:integer:=0;
begin
    process (reset,TSin) 
    begin 
        if (reset='1') then TSout <='1';counter <=0;
            elsif (TSin'event and TSin='1') then counter <=counter +1;
            if (counter =4) then TSout<='0';
                elsif (counter=5) then TSout<='1'; counter <=0;
            end if;
        end if;
    end process;
end Behavioral;

----------------------------------------------------------------------------------


#FSM:
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity FSM is
    Port ( clk : in STD_LOGIC;
           TS : in STD_LOGIC;
           reset : in STD_LOGIC;
           sensor : in STD_LOGIC;
           state_out : out STD_LOGIC_VECTOR (1 downto 0));
end FSM;

architecture Behavioral of FSM is
type mystate is (GR,YR,RG,RY);
signal current_state:mystate := GR;
signal next_state: mystate := GR;
begin
SEQ:process (clk,reset)
begin 
if (reset ='1') then current_state <= GR;
elsif (clk'event and clk='1') 
    then current_state<=next_state;
end if;
end process SEQ;

COMB:process (current_state,TS,sensor)
begin 
case current_state is

when GR=>
if (sensor='0' and TS='1')then next_state<=YR;state_out<="01";
else next_state<=GR;state_out<="00";
end if;
when YR=>
if ( TS='0')then next_state<=RG;state_out<="10";
else next_state<=YR;state_out<="01";
end if;
when RG=>
if (TS='1') then next_state <=RY; state_out<="11";
else next_state <= RG ; state_out <="10";
end if; 
when RY=>
if (TS='0') then next_state <= GR; state_out<="00";
else next_state <= RY; state_out <="11";
end if;   
end case;
end process;
end Behavioral;

----------------------------------------------------------------------------------


#DECODER:
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity decoder is
    Port ( state_in : in STD_LOGIC_VECTOR (1 downto 0);
           Tri_LED1 : out STD_LOGIC_VECTOR (2 downto 0);
           Tri_LED2 : out STD_LOGIC_VECTOR (2 downto 0));
end decoder;

architecture Behavioral of decoder is
begin
with state_in select
   Tri_LED1 <= "010" when "00",
             "110" when "01",
             "100" when "10",
             "100" when "11",
             "000" when others;
with state_in select            
   Tri_LED2 <= "100" when "00",
             "100" when "01",
             "010" when "10",
             "110" when "11",
             "000" when others;

end Behavioral;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

#top level design:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity top_level is
    Port ( top_clk : in STD_LOGIC;
           top_sensor : in STD_LOGIC;
           top_reset : in STD_LOGIC;
           top_triLED1 : out STD_LOGIC_VECTOR (2 downto 0);
           top_triLED2 : out STD_LOGIC_VECTOR (2 downto 0));
end top_level;

architecture Behavioral of top_level is
component clock_divider is
    port ( 	clkin: in std_logic;
				reset: in std_logic;
				clkout: out std_logic);
end component;
component Timersignal is
    Port ( TSin : in STD_LOGIC;
           reset : in STD_LOGIC;
           TSout : out STD_LOGIC);
end component;

component FSM is
    Port ( clk : in STD_LOGIC;
           TS : in STD_LOGIC;
           reset : in STD_LOGIC;
           sensor : in STD_LOGIC;
           state_out : out STD_LOGIC_VECTOR (1 downto 0));
end component; 

component decoder is 
    Port ( state_in : in STD_LOGIC_VECTOR (1 downto 0);
           Tri_LED1 : out STD_LOGIC_VECTOR (2 downto 0);
           Tri_LED2 : out STD_LOGIC_VECTOR (2 downto 0));
end component;

signal S1: std_logic;
signal S2: std_logic;
signal S3: std_logic_vector (1 downto 0);
begin
U1: clock_divider port map (top_clk, top_reset, S1);
U2: Timersignal port map (S1, top_reset, S2);
U3: FSM port map (top_clk, S2, top_reset, top_sensor, S3);
U4: decoder port map (S3, top_triLED1, top_triLED2);

end Behavioral;

----------------------------------------------------------------------------------

#xdc:
----------------------------------------------------------------------------------
############################# Clock signal ###########################################
#Bank = 35, Pin name = IO_L12P_T1_MRCC_35,					Sch name = CLK100MHZ
set_property PACKAGE_PIN E3 [get_ports top_clk]							
set_property IOSTANDARD LVCMOS33 [get_ports top_clk]

############################### Switches ##############################################
#Bank = 34, Pin name = IO_L21P_T3_DQS_34,					Sch name = SW0
set_property PACKAGE_PIN U9 [get_ports {top_sensor}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {top_sensor}]


############################### Tri-Color LEDs ############################################
#Bank = 34, Pin name = IO_L5P_T0_34,						Sch name = LED16_R
set_property PACKAGE_PIN K5 [get_ports top_triLED1[2]]					
	set_property IOSTANDARD LVCMOS33 [get_ports top_triLED1[2]]
#Bank = 15, Pin name = IO_L5P_T0_AD9P_15,					Sch name = LED16_G
set_property PACKAGE_PIN F13 [get_ports top_triLED1[1]]				
	set_property IOSTANDARD LVCMOS33 [get_ports top_triLED1[1]]
#Bank = 35, Pin name = IO_L19N_T3_VREF_35,					Sch name = LED16_B
set_property PACKAGE_PIN F6 [get_ports top_triLED1[0]]					
	set_property IOSTANDARD LVCMOS33 [get_ports top_triLED1[0]]
#Bank = 34, Pin name = IO_0_34,							Sch name = LED17_R
set_property PACKAGE_PIN K6 [get_ports top_triLED2[2]]					
	set_property IOSTANDARD LVCMOS33 [get_ports top_triLED2[2]]
#Bank = 35, Pin name = IO_24P_T3_35,						Sch name =  LED17_G
set_property PACKAGE_PIN H6 [get_ports top_triLED2[1]]					
	set_property IOSTANDARD LVCMOS33 [get_ports top_triLED2[1]]
#Bank = CONFIG, Pin name = IO_L3N_T0_DQS_EMCCLK_14,				Sch name = LED17_B
set_property PACKAGE_PIN L16 [get_ports top_triLED2[0]]					
	set_property IOSTANDARD LVCMOS33 [get_ports top_triLED2[0]]

############################### Push Buttons ###########################################

#Bank = 15, Pin name = IO_L11N_T1_SRCC_15,					Sch name = BTNC
set_property PACKAGE_PIN E16 [get_ports top_reset]						
	set_property IOSTANDARD LVCMOS33 [get_ports top_reset]

----------------------------------------------------------------------------------

 
